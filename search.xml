<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Python串接Azure OpenAI服務</title>
    <url>/2023/11/01/%E4%BD%BF%E7%94%A8Python%E4%B8%B2%E6%8E%A5Azure%20OpenAI%E6%9C%8D%E5%8B%99/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由於工作需求，我開始使用Azure AI平台。在網路上尋找相關教學時，在打Azure openai的api前所需要填入的參數不知道該往哪裡找。為了方便其他使用者，在這裡記錄一份詳細的指南，說明如何在Azure平台上迅速找到與Azure OpenAI相關的資訊。隨後，我將展示如何將這些資訊正確填入Python程式碼中，並成功執行。</p>
<hr>
<h2 id="環境介紹"><a href="#環境介紹" class="headerlink" title="環境介紹"></a>環境介紹</h2><p>Python 3.11<br>openai 0.28.1   (自行在IDE上安裝)</p>
<blockquote>
<p>須特別留意，Python一定要3.7.1版本以上，先前筆者一直使用3.7版本，即或資訊都填對，程式也都會發生錯誤</p>
</blockquote>
<h2 id="Azure-AI平台登入取得資訊並Python程式碼參數填寫步驟說明"><a href="#Azure-AI平台登入取得資訊並Python程式碼參數填寫步驟說明" class="headerlink" title="Azure AI平台登入取得資訊並Python程式碼參數填寫步驟說明"></a>Azure AI平台登入取得資訊並Python程式碼參數填寫步驟說明</h2><ol>
<li><p>到這個網址進行登入 <a href="https://azure.microsoft.com/zh-tw/solutions/ai">https://azure.microsoft.com/zh-tw/solutions/ai</a> 後，連至主控台<br>並點選Azure OpenAI(如沒有出現在主控台，可直接用上方搜尋欄輸入Azure OpenAI送出即可)<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-1.PNG"></p>
</li>
<li><p>點選之前有創建過的GPT模型名稱<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-2.PNG"></p>
</li>
<li><p>點選左側「模型部署」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-3.PNG"></p>
</li>
<li><p>再點選「管理部署」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-4.PNG"></p>
</li>
<li><p>就會連至Azure OpenAIO Studio介面，點選左側選單「聊天」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-5.PNG"></p>
</li>
<li><p>確認右側設定是否就是我們先前部署的部署名稱 (就是確認服務的意思)，確認沒問題，點選「檢視程式碼」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-6.PNG"></p>
</li>
<li><p>就會看到提供的Python範例程式碼<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-7.PNG"><br>將全部程式碼複製下來到你的IDE上</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Note: The openai-python library support for Azure OpenAI is in preview.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line">openai.api_type = <span class="string">&quot;azure&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;https://gpt-xxx.openai.azure.com/&quot;</span></span><br><span class="line">openai.api_version = <span class="string">&quot;2023-07-01-preview&quot;</span></span><br><span class="line">openai.api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = openai.ChatCompletion.create(</span><br><span class="line">engine=<span class="string">&quot;gpt35-xxx&quot;</span>,</span><br><span class="line">messages = [&#123;<span class="string">&quot;role&quot;</span>:<span class="string">&quot;system&quot;</span>,<span class="string">&quot;content&quot;</span>:<span class="string">&quot;You are an AI assistant that helps people find information.&quot;</span>&#125;],</span><br><span class="line">temperature=<span class="number">0.7</span>,</span><br><span class="line">max_tokens=<span class="number">800</span>,</span><br><span class="line">top_p=<span class="number">0.95</span>,</span><br><span class="line">frequency_penalty=<span class="number">0</span>,</span><br><span class="line">presence_penalty=<span class="number">0</span>,</span><br><span class="line">stop=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>這時候我們會需要API Key，連回至<a href="https://portal.azure.com/">https://portal.azure.com/</a> ，回到本文1~2步驟，選到你的Azure OpenAI服務，接著點選左側「金鑰與端點」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-8.PNG"></p>
</li>
<li><p>點選金鑰1或金鑰2複製都可以，複製下來貼上到第7步驟程式碼的<strong>openai.api_key</strong>的值<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-9.PNG"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">openai.api_key = <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXX&quot;</span> <span class="comment"># 替換成複製下來的Key</span></span><br></pre></td></tr></table></figure>
<p>並印出GPT回應內容</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure>
</li>
<li><p>執行程式，如果能成功印出內容就代表串接成功了，像筆者是取得以下回應，每人會不同<br><em>Hello! I am an AI assistant here to help you find information. What can I help you with today?</em></p>
</li>
</ol>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>對於一開始接觸Azure AI的人可能有時候需要的資訊會找不太到，所以紀錄一下，讓未來的自己和新接觸的人可以看到這篇記錄快速完成串接。</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Nuxt3使用vue-social-sharing套件</title>
    <url>/2023/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Nuxt3%E4%BD%BF%E7%94%A8vue-social-sharing%E5%A5%97%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vue-social-sharing是用來透過社群軟體分享網頁內容的一個套件，例如：Facebook、Line 社群軟體，在npm有高手寫了一個vue-social-sharing套件，在Vue和Nuxt2可以成功用說明成功安裝並使用，但在Nuxt3會引入失敗，所以這一篇文章就來實現如何在Nuxt3將此套件引入並實作相關邏輯出來。</p>
<h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><ol>
<li><p>先進行套件安裝 npm install — save vue-social-sharing@next</p>
</li>
<li><p>嘗試依據npm作者提供之方式引入，在nuxt.config.ts檔案內寫上modules屬性內寫入套件名。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: [</span><br><span class="line">        <span class="string">&#x27;vue-social-sharing/nuxt&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>但無法順利引用，判斷套件可使用在Nuxt2，無法使用在Nuxt3。</p>
<ol start="3">
<li><p>解決方法：使用plungins方式引用此套件</p>
<p> (1)於plugins內新增socialSharing.js檔案，內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueSocialSharing</span> <span class="keyword">from</span> <span class="string">&quot;vue-social-sharing&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function"><span class="params">nuxtApp</span> =&gt;</span> &#123;</span><br><span class="line">    nuxtApp.<span class="property">vueApp</span>.<span class="title function_">use</span>(<span class="title class_">VueSocialSharing</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> (2)在components資料夾內新增SocialShare.vue檔，內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> sharing = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;https://github.com/nicolasbeauvais/vue-social-sharing?ref=morioh.com&amp;utm_source=morioh.com&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Say hi to Vite! A brand new, extremely fast development setup for Vue.&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;This week, I’d like to introduce you to &quot;Vite&quot;, which means &quot;Fast&quot;. It’s a brand new development setup created by Evan You.&#x27;</span>,</span><br><span class="line">    <span class="attr">quote</span>: <span class="string">&quot;The hot reload is so fast it&#x27;s near instant. - Evan You&quot;</span>,</span><br><span class="line">    <span class="attr">hashtags</span>: <span class="string">&quot;vuejs,vite,javascript&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> networks = <span class="title function_">reactive</span>([</span><br><span class="line">    &#123; <span class="attr">network</span>: <span class="string">&quot;facebook&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Facebook&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;fab fah fa-lg fa-facebook-f&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;#1877f2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">network</span>: <span class="string">&quot;line&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Line&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;fab fah fa-lg fa-line&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;#00c300&quot;</span> &#125;,</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ShareNetwork</span> <span class="attr">class</span>=<span class="string">&quot;float-right&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;network in networks&quot;</span> <span class="attr">:network</span>=<span class="string">&quot;network.network&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;network.network&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: network.color &#125;&quot;</span> <span class="attr">:url</span>=<span class="string">&quot;sharing.url&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;sharing.title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:description</span>=<span class="string">&quot;sharing.description&quot;</span> <span class="attr">:quote</span>=<span class="string">&quot;sharing.quote&quot;</span> <span class="attr">:hashtags</span>=<span class="string">&quot;sharing.hashtags&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:twitterUser</span>=<span class="string">&quot;sharing.twitterUser&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;network.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; network.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ShareNetwork</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p> (3) 如有多個分享社群，因Nuxt server render問題，會發生只有第一個社群媒體圖示會正常呈現出來，則引入上述步驟時的component時應使用defineAsyncComponent非同步引入方式，script標籤內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SocialShare</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/SocialShare.vue&quot;</span>));</span><br></pre></td></tr></table></figure>

<p> 並在template使用ClientOnly方式，讓該component只在client端render出來，內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">ClientOnly</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">SocialShare</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ClientOnly</span>&gt;</span><br></pre></td></tr></table></figure>

<p> (4) 成功引入！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Vue</tag>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>如何將Vue的composable和component經由Vite打包至npm平台，讓其他人可以載入使用</title>
    <url>/2023/11/06/%E5%A6%82%E4%BD%95%E5%B0%87Vue%E7%9A%84composable%E5%92%8Ccomponent%E7%B6%93%E7%94%B1Vite%E6%89%93%E5%8C%85%E8%87%B3npm%E5%B9%B3%E5%8F%B0%EF%BC%8C%E8%AE%93%E5%85%B6%E4%BB%96%E4%BA%BA%E5%8F%AF%E4%BB%A5%E8%BC%89%E5%85%A5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想把團隊會重複使用到的composable和component打包至<a href="https://www.npmjs.com/">npm平台</a>後重複使用，像是在Vue.js世界常遇到的VueUse、ElementPlus是如何做到套件打包，上網查相關資料將實作筆記整理出來。</p>
<h2 id="建立Vue專案"><a href="#建立Vue專案" class="headerlink" title="建立Vue專案"></a>建立Vue專案</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init vue@next [專案名稱]</span><br></pre></td></tr></table></figure>
<p>如下圖，專案名稱自行取名即可，但可以先到<a href="https://www.npmjs.com/">npm平台</a>看一下，我們取名的名稱是否已經被別人命名走，如果有重複，最後套件部署上去會失敗喔，要特別留意。<br>筆者用<strong>fred-vue-library</strong>專案名稱示範。<br>基本上沒有額外需求，直接Enter(選No)到底即可。<br><img src="/img/vite%E6%89%93%E5%8C%85-1.PNG"></p>
<h2 id="建立composable-視需求"><a href="#建立composable-視需求" class="headerlink" title="建立composable (視需求)"></a>建立composable (視需求)</h2><p><em>什麼是composable？基本上就是跟js檔案很像，把裡面的共用邏輯打包出來，如果希望這個是有響應式的物件，那就需要使用到composable</em><br>如果想做composable再實作</p>
<ol>
<li>至src資料夾底下建立composable資料夾</li>
<li>src&#x2F;composable資料夾內新增useMouse.js檔案，以下是官網composable範例用來呈現目前滑鼠所在的x和y座標<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMouse</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    x.<span class="property">value</span> = event.<span class="property">pageX</span></span><br><span class="line">    y.<span class="property">value</span> = event.<span class="property">pageY</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, update))</span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, update))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://cn.vuejs.org/guide/reusability/composables.html">官網 Composables</a></p>
</blockquote>
</li>
</ol>
<h2 id="建立component-視需求"><a href="#建立component-視需求" class="headerlink" title="建立component (視需求)"></a>建立component (視需求)</h2><ol>
<li>先清空src&#x2F;components資料夾內所有的vue檔案(因為我們不會用到)</li>
<li>src&#x2F;components資料夾內新增FButton.vue檔案<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;FButton&quot;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">size</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;middle&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">type</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;fred-btn&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[size, type]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.fred-btn</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    appearance: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.large</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">240px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.medium</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">180px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.small</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">32px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.default</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-color</span>: <span class="number">#e4e4e4</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#666</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.primary</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-color</span>: blue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.danger</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="built_in">lighten</span>(red, <span class="number">50%</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="其他配置-重要"><a href="#其他配置-重要" class="headerlink" title="其他配置(重要)"></a>其他配置(重要)</h2><ol>
<li><p>在src資料夾內新增index.js<br>此檔案是用來放最後套件進入的第一個入口，非常重要，所以要把我們上述步驟的composable和component整理在這個js檔裡面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">FButton</span> <span class="keyword">from</span> <span class="string">&quot;./components/FButton.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useMouse &#125; <span class="keyword">from</span> <span class="string">&quot;./composable/useMouse.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">FButton</span>, useMouse &#125;; <span class="comment">//用來本地引入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用來全域引入</span></span><br><span class="line"><span class="keyword">const</span> components = [<span class="title class_">FButton</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">install</span>: <span class="keyword">function</span> (<span class="params">Vue, options = &#123;&#125;</span>) &#123;</span><br><span class="line">        components.<span class="title function_">forEach</span>(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Vue</span>.<span class="title function_">component</span>(component.<span class="property">name</span>, component);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>把FButton, useMouse做輸出，未來在vue檔內做區域引入使用</li>
<li>因為composable比較少用全域引入，所以就沒有做了，範例只針對component也做全域引入(未來使用者在專案內可以在main.js用 .use()方式引入)</li>
</ul>
</li>
<li><p>調整vite.config.js檔案內容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/index.js&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;FredVueLibrary&#x27;</span>,</span><br><span class="line">      <span class="attr">fileName</span>: <span class="function">(<span class="params">format</span>) =&gt;</span> <span class="string">`fred-vue-library.<span class="subst">$&#123;format&#125;</span>.js`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 確保外部化處理那些你的庫中不需要打包的依賴</span></span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 為全局變量提供一個名稱</span></span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>src&#x2F;index.js就是上一個步驟做的檔案，作為套件的entry(入口)</li>
</ul>
</li>
<li><p>調整package.json檔案內容</p>
</li>
</ol>
<ul>
<li>P.S.要記得先到<a href="https://www.npmjs.com/">npm平台</a>先進行註冊，要記得使用者名稱以及信箱，要填入到author欄位<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fred-vue-library&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/fred-vue-library.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/fred-vue-library.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;.&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/fred-vue-library.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/fred-vue-library.umd.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./style.css&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/style.css&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fredchang &lt;spadej03727@gmail.com&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;less&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.4.5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如為第一次發布，version設為1.0.0即可，但如果後續有更新，要再發布，就一定要大於最新一次的發布版本。</li>
<li>exports欄位內，import我是填入es.js方式，因為現在前端幾乎都是使用ES6方式import套件，所以就比較不會用到umd的格式了，如有興趣了解差異，再自行研究。</li>
<li>要留意如果你的package.json裡面有private欄位記得設為false，或直接刪掉即可。否則無法發佈到npm平台。</li>
</ul>
</li>
</ul>
<ol start="4">
<li>將src&#x2F;App.vue內容預設內容清空，留下以下配置即可<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="準備npm發布"><a href="#準備npm發布" class="headerlink" title="準備npm發布"></a>準備npm發布</h2><ul>
<li><p>登入npm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不確定登入狀態，可以確認一下身分(沒其他可能就可跳過)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure></li>
<li><p>先把剛剛實作的程式先build出來</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm build</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果發布前想先試試看套件能否順利載入可以用以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm link [套件名]</span><br></pre></td></tr></table></figure>
<p>所以如果像示範的則填入npm link fred-vue-library<br>可藉由此指令，在本地引入看正不正常。<br><strong>需特別注意這個有cache問題，所以還是npm publish發布出去引入看結果最準</strong></p>
</li>
<li><p>發布</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<p><img src="/img/vite%E6%89%93%E5%8C%85-3.PNG"></p>
</li>
</ul>
<h2 id="建立其他專案安裝套件"><a href="#建立其他專案安裝套件" class="headerlink" title="建立其他專案安裝套件"></a>建立其他專案安裝套件</h2><p>請依照這篇文章開頭處找<strong>建立Vue專案</strong>章節，建置其他專案</p>
<ol>
<li><p>先安裝Vite所需套件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立我們剛剛發布的專案</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i fred-vue-library</span><br></pre></td></tr></table></figure>
<p>這邊請自行換成自己的套件名</p>
</li>
<li><p>在App.vue引入相關模組，可跟著我修改如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useMouse, <span class="title class_">FButton</span> &#125; <span class="keyword">from</span> <span class="string">&quot;fred-vue-library&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fred-vue-library/style.css&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMouse</span>();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">FButton</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>測試按鈕<span class="tag">&lt;/<span class="name">FButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; x &#125;&#125;,&#123;&#123; y &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>fred-vue-library請自行換成自己發布的套件名稱。<br>此為區域引入方式，</p>
</li>
<li><p>把專案運行起來</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">run</span> dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>呈現成果<br><img src="/img/vite%E6%89%93%E5%8C%85-2.PNG"></p>
</li>
<li><p>(補充)使用全域引入component<br>main.js調整如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fred-vue-library/style.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FredVueLibrary</span> <span class="keyword">from</span> <span class="string">&quot;fred-vue-library&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">FredVueLibrary</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然後把App.vue區域引入component也拿掉，css檔也拿掉，更改如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useMouse &#125; <span class="keyword">from</span> <span class="string">&quot;fred-vue-library&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMouse</span>();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">FButton</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>測試按鈕<span class="tag">&lt;/<span class="name">FButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; x &#125;&#125;,&#123;&#123; y &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這樣也跟上一點的呈現結果相同，要不要用全域就看個人了，我個人比較喜歡區域引入，對於目前這個頁面載入了哪些元件比較清楚。</p>
</li>
</ol>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li>透過這個整理，更熟悉Vite打包Vue元件相關過程。</li>
<li>一直踩到npm link的雷，所以建議部署還是以npm publish為主，這樣檢查套件是否正常運作最準確。</li>
</ol>
<blockquote>
<p>全部程式碼：<a href="https://github.com/FredChang14/fred-vue-library">Github Repo</a></p>
</blockquote>
<blockquote>
<p>參考資料<br><a href="https://docs.npmjs.com/cli/v10/configuring-npm/package-json">npm Docs</a><br><a href="https://medium.com/@debbyji/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%80%8B-npm-%E5%A5%97%E4%BB%B6-%E6%8A%8A-vue-component-%E6%89%93%E5%8C%85%E5%88%B0-npm-%E5%90%A7-e5f9a6901c5c">Medium文章-作者：Debby Ji</a><br><a href="https://segmentfault.com/a/1190000043739133">SF文章-作者：一柯白菜</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Vue</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>探討Javascript的Hoisting</title>
    <url>/2023/10/31/%E6%8E%A2%E8%A8%8EJavascript%E7%9A%84Hoisting/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hoisting(中文翻作提升)，這個概念在Javascript常常被使用到，特別在使用var和傳統function時就深深體會到Javascript特殊的地方，這一篇我們來簡單了解一下Hoisting的運作。</p>
<hr>
<h2 id="var變數的Hoisting"><a href="#var變數的Hoisting" class="headerlink" title="var變數的Hoisting"></a>var變數的Hoisting</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//印出undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>上述結果會印出undefined，為什麼呢？因為這樣寫法等同於以下寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//印出undefined</span></span><br><span class="line">x = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>可以看出Hoisting是指<strong>宣告的動作</strong>被提升</p>
<h2 id="傳統函式的Hoisting"><a href="#傳統函式的Hoisting" class="headerlink" title="傳統函式的Hoisting"></a>傳統函式的Hoisting</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>) <span class="comment">//印出Hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述結果會印出Hello，因為整個function都會被提升，這樣寫法等同於以下寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>) <span class="comment">//印出Hello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>
<p>這也就是為什麼在Javascript裡頭將一個函式用function宣告，也能順利執行函式的原因，因為整個function都提升到呼叫語句之前了阿！</p>
<h2 id="var變數宣告函式的Hoisting"><a href="#var變數宣告函式的Hoisting" class="headerlink" title="var變數宣告函式的Hoisting"></a>var變數宣告函式的Hoisting</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>會發生錯誤<em>Uncaught TypeError: test is not a function”</em> ，因為這樣的宣告方式等同於以下寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test</span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line">test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出Hoisting是指<strong>宣告的動作</strong>被提升，所以這邊的test是undefined，自然而然用函式的方式直接呼叫，瀏覽器就報給我們一個錯誤說test不是一個function。所以如果要用變數宣告function的話，務必要用以下的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>
<p>然後我也會習慣把var改為const方式來宣告，也有點防呆的機制，讓後續的指派變數動作不會誤指派值給這個function，因為我們也很少會把宣告出來的函式重新指派值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li>Hoisting的宣告是指宣告的動作被提升，所以使用var來宣告變數或函式時要特別留意。</li>
<li>在實際專案中，我也較習慣宣告變數都使用let或是const，不會使用var，這樣就能避開Hoisting的問題；至於宣告函式我也習慣用const方式宣告，可以避免誤指派值的事情發生。</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>探討Vue的watch機制</title>
    <url>/2023/10/27/%E6%8E%A2%E8%A8%8EVue%E7%9A%84watch%E6%A9%9F%E5%88%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Vue.js我們常常會使用watch來做一些對應處理，例如可以監控某值出現變化的時候，就觸發function去做事情，有時候我們也會需要拿到變化前的值或變化後的值去做利用。此篇我們來探討一下watch機制如何運作。</p>
<h2 id="監控ref定義的響應式數據"><a href="#監控ref定義的響應式數據" class="headerlink" title="監控ref定義的響應式數據"></a>監控ref定義的響應式數據</h2><p>請特別注意，這邊提到的是數據，不是物件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>,newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;&#123;sum&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>點擊一下，查看主控台(F12&gt;&gt;console)會印出1和0的值<br><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-1.PNG"><br>再點一下newVal和oldVal則再往上累加。<br>代表監控ref定義的響應式數據</p>
<ol>
<li>可以直接針對ref進行監控</li>
<li>可以成功印出新值和舊值</li>
</ol>
<h2 id="監控ref定義的多個響應式數據"><a href="#監控ref定義的多個響應式數據" class="headerlink" title="監控ref定義的多個響應式數據"></a>監控ref定義的多個響應式數據</h2><p>用陣列將要監控的ref裝起來</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> message= <span class="title function_">ref</span>(<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line"><span class="title function_">watch</span>([sum,message],<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>,newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;&#123;sum&#125;&#125;</span></span><br><span class="line"><span class="language-xml">&#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>sum click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;message += &#x27;~&#x27;&quot;</span>&gt;</span>message click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>點選sum click按鈕會印出以下結果</p>
<p><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-2.PNG"></p>
<h2 id="監控reactive所定義的一個響應式物件"><a href="#監控reactive所定義的一個響應式物件" class="headerlink" title="監控reactive所定義的一個響應式物件"></a>監控reactive所定義的一個響應式物件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; person.age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>點選click按鈕會印出以下結果<br><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-3.PNG"><br>我們會發現newVal的age值變成19了，oldVal竟然也是相同值(因指向同一個對象，共用一份記憶體)，代表我們無法取得oldVal的值，這一點要特別留意，不過我們一般的需求也還真的鮮少拿舊的值去做運用，所以影響並沒有太大。</p>
<blockquote>
<p>註：reactive也能改為ref，但監控對象就要改寫為person.value，才能偵測到裡面值的變化</p>
</blockquote>
<h2 id="監控reactive所定義的一個響應式數值"><a href="#監控reactive所定義的一個響應式數值" class="headerlink" title="監控reactive所定義的一個響應式數值"></a>監控reactive所定義的一個響應式數值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(person.<span class="property">age</span>, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; person.age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>瀏覽器會直接報出警告<em>A watch source can only be a getter&#x2F;effect function, a ref, a reactive object, or an array of these types.</em><br>意思是說，watch能監控的對象只能是 getter函式、ref對象、reactive物件對象、陣列，所以上述例子person.age是單純的值是無法監控的，所以要做監控的話我們可以包裝成getter函式，改寫成以下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">age</span>,<span class="function">(<span class="params">newVal,oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>按下click後印出以下結果<br><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-4.PNG"></p>
<p>這樣就能順利監控到person.age的值了</p>
<blockquote>
<p>註：reactive也能改為ref，但監控對象就要改成()&#x3D;&gt;person.value.age，才能偵測到裡面值的變化</p>
</blockquote>
<h2 id="為什麼有時候ref對象要加上-value，有時候不用，判斷標準是什麼"><a href="#為什麼有時候ref對象要加上-value，有時候不用，判斷標準是什麼" class="headerlink" title="為什麼有時候ref對象要加上.value，有時候不用，判斷標準是什麼"></a>為什麼有時候ref對象要加上.value，有時候不用，判斷標準是什麼</h2><p>依據對象型態而定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">job</span>: &#123;</span><br><span class="line">    <span class="attr">m1</span>: &#123;</span><br><span class="line">      <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">watch</span>(sum, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">watch</span>(person.<span class="property">value</span>, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; sum &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; person.job.m1.salary &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.job.m1.salary++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>像sum的話是一個基本類型數字型態用ref包裝起來的，就不用額外加上.value，因為加上.value就是指裡面0的值，是無法作監控的。<br>如果是person因為他是一個物件用ref包裝，裡面的屬性值變化時，需要偵測我們就必須監控person.value的值，就是針對Proxy物件來監控，就能偵測到變化。<br>另外一提，假若現在真的不想要.value，則可將watch改寫為以下，加上{deep:true}做深層監控，也是能監控到最新的值，如何使用還是看個人習慣。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="上述範例重點整理"><a href="#上述範例重點整理" class="headerlink" title="上述範例重點整理"></a>上述範例重點整理</h2><ol>
<li>如果是基本型態的資料要監控，可用getter函式返回</li>
<li>監控reactive和ref概念一樣，只是要注意ref對象要記得加上.value，加上.value就是等同於reactive對象，就是Proxy物件</li>
<li>承上，如果ref不要用.value處理，則要用{ deep: true }做深層監控，就能監控到</li>
<li>reactive對象，強制會用深層監控，不用加{ deep: true }</li>
</ol>
<blockquote>
<p>參考資料：<a href="https://cn.vuejs.org/guide/essentials/watchers.html#basic-example">官網</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂Javascript的call、apply、bind差異</title>
    <url>/2023/11/02/%E6%90%9E%E6%87%82call%E3%80%81apply%E3%80%81bind%E5%B7%AE%E7%95%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過這篇將在框架源碼(如Vue.js)常常會用到的手法call、apply、bind做一些觀念的釐清，幫助自己在看源碼的時候可以更清楚框架作者的撰寫邏輯，也紀錄之前常搞錯觀念的例子提醒自己。</p>
<hr>
<h2 id="了解call、apply、bind用法"><a href="#了解call、apply、bind用法" class="headerlink" title="了解call、apply、bind用法"></a>了解call、apply、bind用法</h2><ul>
<li><p><strong>call</strong></p>
<blockquote>
<p>用法：函式名稱.call(綁定物件,參數,…)<br>返回值：函式執行後的結果</p>
</blockquote>
</li>
<li><p><strong>apply</strong></p>
<blockquote>
<p>用法：函式名稱.apply(綁定物件,[參數,…])<br>返回值：函式執行後的結果</p>
</blockquote>
</li>
<li><p><strong>bind</strong>   <em>(這邊不討論bind傳其他參數用法)</em></p>
<blockquote>
<p>用法：函式名稱.bind(新的綁定物件)<br>返回值：函式本身</p>
</blockquote>
</li>
</ul>
<h2 id="call和apply為函式呼叫"><a href="#call和apply為函式呼叫" class="headerlink" title="call和apply為函式呼叫"></a>call和apply為函式呼叫</h2><p>先來看以下範例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testFn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testFn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// 1,2,3</span></span><br><span class="line">testFn.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 1,2,3</span></span><br><span class="line">testFn.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure>
<p>上述結果都是印出1,2,3，<code>testFn(1,2,3)</code>為一般函式呼叫方式，應該都很熟悉。<br>上述call和apply不綁定任何物件，所以塞了一個null，然後填上參數名(要留意apply的用法的參數是要用陣列[]裝起來)，並執行，可以證明call和apply的確就是執行函式，然後返為執行後的結果。</p>
<h1 id="bind為綁定物件"><a href="#bind為綁定物件" class="headerlink" title="bind為綁定物件"></a>bind為綁定物件</h1><p>常見範例如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">initalName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">Name</span> = initalName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">Name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delaySayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;...Hi, My name is &#x27;</span>, <span class="variable language_">this</span>.<span class="property">Name</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Fred&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayHi</span>();</span><br><span class="line">person.<span class="title function_">delaySayHi</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>會發現印出結果是<br><img src="/img/call%E3%80%81apply%E3%80%81bind%E6%96%87%E7%AB%A0-1.PNG"><br>會發現setTimeout裡面印出的this.name會是<em>undefined</em>，因為這個this是指向全域的Window物件，該如何解決呢？<br>我們這時候就能夠用bind，所以改為以下程式碼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">initalName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">Name</span> = initalName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">Name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delaySayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;...Hi, My name is &#x27;</span>, <span class="variable language_">this</span>.<span class="property">Name</span>)</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Fred&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayHi</span>();</span><br><span class="line">person.<span class="title function_">delaySayHi</span>();</span><br></pre></td></tr></table></figure>
<p>印出結果是<br><img src="/img/call%E3%80%81apply%E3%80%81bind%E6%96%87%E7%AB%A0-2.PNG"></p>
<p>看起來好像有點亂、難理解，但其實仔細看，setTimeout函式的第一個參數就是函式，所以上述我們有介紹過bind用法，所以就是直接針對以下的函式：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;...Hi, My name is &#x27;</span>, this.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述這個函式後面加上 <code>.bind(this)</code>，就完成bind(這個this就是指向這個Person物件，所以就能抓到Fred的值。<a href="/2023/10/27/%E6%90%9E%E6%87%82Javascript%E7%9A%84this/" title="搞懂Javascript的this">相關觀念可看這篇文章</a>)<br><em>(當然更直覺作法就是用ES6出現的箭頭函式，就能更直觀的解決，但這個不是我們今天要討論的重點，所以就先略過。)</em></p>
<h2 id="bind用法觀念釐清"><a href="#bind用法觀念釐清" class="headerlink" title="bind用法觀念釐清"></a>bind用法觀念釐清</h2><p>接下來的一個範例，是我以前在學習bind時發生的錯誤觀念產生的寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">printX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="comment">//這是錯誤作法，會印出undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="title function_">printX</span>())</span><br></pre></td></tr></table></figure>
<p>本來以為多了一個bind(this)也應該沒事，但這個this其實是指向全域的Window物件，所以結果是印出<em>undefined</em>。<br>這個也幫助我釐清另一個觀念，物件裡面的this必須是包在傳統函式<code>function()&#123;&#125;</code>裡面的this才是指向物件本身。<br>所以如果要印出this.x的值，把<code>.bind(this)</code>刪掉即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">printX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="title function_">printX</span>())</span><br></pre></td></tr></table></figure>
<p>就能印出123的值了</p>
<p>這時候，我們再將上述範例做一點延伸</p>
<h2 id="綜合call、apply、bind綁定物件"><a href="#綜合call、apply、bind綁定物件" class="headerlink" title="綜合call、apply、bind綁定物件"></a>綜合call、apply、bind綁定物件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">printX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> showX = aaa.<span class="property">printX</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="title function_">printX</span>()); <span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">showX</span>()); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p>將 <code>aaa.printX</code> 指派給showX 函式，然後用一般函式的方式呼叫showX，因為這個函式的this就是指向全域的Window物件，所以第9行是印出<em>undefined</em>。<br>這時候這篇文章的三大主角都能處理這個問題，程式碼如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(showX.<span class="title function_">call</span>(aaa)); <span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(showX.<span class="title function_">apply</span>(aaa)); <span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(showX.<span class="title function_">bind</span>(aaa)()); <span class="comment">//123</span></span><br></pre></td></tr></table></figure>
<p>三個方式都印出我們要的結果，我們綁定了aaa物件並執行它。<br>要特別留意，bind後要再多一個括號()，代表要去執行該函式。</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li>call和apply都是執行函式，所以會return<strong>函式的結果</strong>；但bind就不同了，它只是單純綁定物件，return<strong>函式本身</strong>(也就是未執行)</li>
<li>如果call和apply不綁定物件就填上null即可，就是會跟一般函式的執行結果一樣。(但我們一般不太會去綁null，有點脫褲子放屁的感覺www)</li>
<li>這三個用法常常會跟this扯上關係，是用來改變原函式this的指向。</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂Javascript的this</title>
    <url>/2023/10/27/%E6%90%9E%E6%87%82Javascript%E7%9A%84this/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Javascript程式語言中，常面臨到this，但也很常搞不太清楚this指向的對象是誰，而造成程式的一些bug，透過這篇文章來釐清並整理一下this的觀念，以下將用各情境來說明。</p>
<hr>
<h2 id="情境1-直接宣告this"><a href="#情境1-直接宣告this" class="headerlink" title="情境1-直接宣告this"></a>情境1-直接宣告this</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(this) <span class="comment">//Window</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>會發現無任何包裝，直接印出this，會指向Window物件</p>
<h2 id="情境2-獨立函式內的this"><a href="#情境2-獨立函式內的this" class="headerlink" title="情境2-獨立函式內的this"></a>情境2-獨立函式內的this</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testFn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(this); <span class="comment">//Window</span></span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(this.innerWidth); <span class="comment">//可以印出視窗的寬度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>獨立函式內的this也是指向Window物件</p>
<h2 id="情境3-物件方法內的this"><a href="#情境3-物件方法內的this" class="headerlink" title="情境3-物件方法內的this"></a>情境3-物件方法內的this</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Fred&quot;</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//person物件本身</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//Fred</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure>
<p>可以看出物件方法內的this就是物件本身，所以也能因此再找出其他屬性或方法，如name屬性，就印出Fred。<br>這時候我們來實驗一下，把傳統function改為箭頭函式會發生什麼事情呢？</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">let person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Fred&quot;</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(this); <span class="comment">//Window</span></span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(this.name); <span class="comment">//undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.say();</span><br></pre></td></tr></table></figure>
<p>這時候發現this竟然會印出Window物件，為什麼呢？因為如果用箭頭函式，就沒有自己的this，所以如果在箭頭函式內沒有找到this變數，就會往外找，就直接找到Window物件，所以也因為Window沒有name的屬性，自然this.name就印出undefined了。所以使用箭頭函式時要特別注意一下這個觀念。</p>
<h2 id="情境4-事件處理function"><a href="#情境4-事件處理function" class="headerlink" title="情境4-事件處理function"></a>情境4-事件處理function</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//document元素</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;我被點到了&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>this就是觸發事件的對象物件，像上述範例來說，就是document元素。<br>若改為箭頭函式，會發生什麼事呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//Window</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;我被點到了&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在情境3時我們有提到箭頭函式沒有自己的this，所以函式內的this就是往外找，也找到了Window物件，因此，如果我們點一下畫面會直接報錯Uncaught TypeError: Cannot set properties of undefined (setting ‘innerHTML’)</p>
<h2 id="情境5-建構函式-Constructor-Function"><a href="#情境5-建構函式-Constructor-Function" class="headerlink" title="情境5-建構函式(Constructor Function)"></a>情境5-建構函式(Constructor Function)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//&#123;&#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Fred&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1); <span class="comment">//&#123;age: 18,name: &quot;Fred&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>這個範例可以發現第2行的this印出來是Person空白物件，不是一般物件。</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在做專案的時候常常因為追求語法閱讀與簡潔所以常會用到this，但往往沒有搞懂一些概念而造成意外的bug發生，如果再加上箭頭函式的觀念也沒有搞清楚的話，除錯起來也是很辛苦的，所以特別將this用法整理出來，也提醒自己要留意this的指向。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>用for迴圈執行setTimeout方法印出1~5有哪些解法</title>
    <url>/2023/10/27/%E8%B7%91%E8%BF%B4%E5%9C%88%E7%94%A8setTimeout%E5%8D%B0%E5%87%BA1-5%E6%9C%89%E5%93%AA%E4%BA%9B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我們常用跑迴圈setTimeout來理解var和let的差異，我們知道var的作用域是以function來分界，let是以{}來分界，那現在我們來挑戰不用let，選擇用var來作為解決方案，那該如何解決這個問題呢？</p>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>使用var不做任何處理，想取得第一秒時取得1、第二秒取得2、…、第五秒取得5</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>卻發現第一秒卻取得5、第二秒也是取得5，一直到第五秒也是取得5。<br>為什麼會發生這樣的問題？因為setTimeout屬於非同步函式，不會馬上執行到(會先被放在queue裡面)，加上i變數是用var宣告的，進行持續累加，累加超過5跳出迴圈，要注意var是全域變數，已經污染到全域了。<br>可以在這段程式碼後面是者印出i來看看，我們可以取得迴圈內的變數i的值console.log(i)，會發現印出5</p>
<p>我們一般常會用的解法可能是把var改為let就好了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就能拿到預期的結果，第一秒時取得1、第二秒取得2、…、第五秒取得5。</p>
<p>現在我就只想用var不想用let來實驗有沒有辦法得到上述需求</p>
<hr>
<h2 id="解法1：使用setTimeout傳入參數方式處理"><a href="#解法1：使用setTimeout傳入參數方式處理" class="headerlink" title="解法1：使用setTimeout傳入參數方式處理"></a>解法1：使用setTimeout傳入參數方式處理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>setTimeout我們一般使用可能只會傳兩個參數，但setTimeout可以傳入第三個參數，如此一來就不會被全域的問題影響到i值</p>
<blockquote>
<p>參考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout">MDN文件：setTimeout</a></p>
</blockquote>
<h2 id="解法2：使用bind方式處理"><a href="#解法2：使用bind方式處理" class="headerlink" title="解法2：使用bind方式處理"></a>解法2：使用bind方式處理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(<span class="literal">null</span>, i), i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這個方式是用bind方式，因為沒有要綁任何對象，所以bind方法第一個參數填上null即可，但二個參數就要填上setTimeout傳入的參數i，如此一來也能達到需求</p>
<blockquote>
<p>參考：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN文件：bind</a></p>
</blockquote>
<h2 id="解法3：使用閉包-closure"><a href="#解法3：使用閉包-closure" class="headerlink" title="解法3：使用閉包(closure)"></a>解法3：使用閉包(closure)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">    &#125;, x * <span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過傳入i給立即函式的方式，立即函式裡面用x變數將i變數的值保存下來，進而達到預期效果。<br>註：閉包要有巢狀的function才算是閉包哦</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>以上三種方式就是今天限制自己不用let方式，只使用var來達到預期的結果。不過在正式專案中，還是推薦用let的方式來做這個需求會更簡潔，也更好懂，像筆者的一些專案是不會看到任何var的蹤影。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂Javascript傳值、傳址觀念</title>
    <url>/2023/11/07/%E6%90%9E%E6%87%82Javascript%E5%82%B3%E5%80%BC%E3%80%81%E5%82%B3%E5%9D%80%E8%A7%80%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>剛開始接觸傳值(pass by value)和傳址(pass by reference)時，常常會搞混，如果觀念似懂非懂的話在開發專案的時候可能會不自覺踩到雷，這一篇就把這個觀念好好記錄下來。</p>
<h2 id="傳值-pass-by-value"><a href="#傳值-pass-by-value" class="headerlink" title="傳值(pass by value)"></a>傳值(pass by value)</h2><p>string、number、boolean、null、undefined都是<strong>基本型別</strong>，所以會根據pass by value的方式來運作，另外function 也是以此方式運作<br>舉例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//666</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//666</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">777</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//777</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//666</span></span><br></pre></td></tr></table></figure>
<p>第2行：把a值指派給b變數，所以b值為666<br>第6行：把a值設為777<br>第8行：b值還是本來的值，也就是666</p>
<h2 id="傳址-pass-by-reference"><a href="#傳址-pass-by-reference" class="headerlink" title="傳址(pass by reference)"></a>傳址(pass by reference)</h2><p>物件裡面的屬性會根據pass by reference來運作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> son = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> father = son;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line">son.<span class="property">age</span> = <span class="number">40</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">age</span>); <span class="comment">// 40</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">age</span>); <span class="comment">// 40</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son === father); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>第4行：把son值指派給father變數，所以father值為<code>&#123;age: 18&#125;</code><br>第7行：將son的age屬性改為40<br>第9行：father的age屬性值也會變成40<br>第11行：son 完全等於father，因為是<em>共用一份記憶體</em></p>
<p>陣列也會依據pass by reference來運作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1;</span><br><span class="line"></span><br><span class="line">arr1.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure>
<p>第4行：針對arr1再多push4的值<br>第6行：也改動到了arr2的值</p>
<p>所以常常在實戰中，習慣複製一份出來，再做相關操作<br>可以在第2行改為<code>let arr2 = arr1.slice(0);</code>或是用ES6擴展符<code>let arr2 = [ ...arr1 ]</code>方式來賦值 (前提裡面的元素不要是物件或陣列)<br>如此一來arr2就不會受到任何影響了</p>
<h2 id="其他種情況"><a href="#其他種情況" class="headerlink" title="其他種情況"></a>其他種情況</h2><p>如果我們現在是把整個物件取代掉，會發生什麼事呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> son = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> father = son;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line">son = &#123; <span class="attr">age</span>: <span class="number">5</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">age</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">age</span>); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>
<p>第7行：son賦予整個物件<code>&#123; age: 5 &#125;</code><br>第9行：father的age仍然是18，因為son是重新賦值，會產生一個新的實體參考，所以不會影響到father的age值</p>
<p>這種情況有人稱它為pass by sharing，也有人會認為說這個其實就是pass by value，我們就不在名詞上面爭議，理解一下概念即可。<br>陣列也會有這樣的情況，如果是賦予一個全新陣列，也會跟本來的獨立，這邊就不額外舉例了。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li>了解pass by value和pass by reference的差異</li>
<li>僅修改物件或陣列裡面的值以及賦予整個物件或陣列，結果會不同(因記憶體指向的差異)</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何整合Vue和.NetCore及部署到IIS上線</title>
    <url>/2023/11/10/%E5%A6%82%E4%BD%95%E5%B0%87Vue%E5%92%8C-NetCore%E5%8F%8A%E9%83%A8%E7%BD%B2%E5%88%B0IIS%E4%B8%8A%E7%B7%9A/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為工作關係，團隊考慮將前端改為Vue框架來進行開發，後端則是使用.NetCore，所以建置目標為前端為Vue，後端為.Net6的環境，透過這篇筆記提醒未來的自己以及給需要的人參考，為確保環境能夠部署上線，也會示範部署到IIS的步驟。</p>
<h2 id="IDE環境版本"><a href="#IDE環境版本" class="headerlink" title="IDE環境版本"></a>IDE環境版本</h2><p>Visual Studio 2022  版本17.7.4</p>
<blockquote>
<p>會特別註明版本是因為前幾個版本似乎沒有官方提供的前後端整合選項，所以如果在選擇專案類型沒有看到跟筆者一樣的時候，請留意一下Visual Studio 2022版本<br>在官方還沒有提供前後端整合版本前，已經有高手做的專案模板出來，也是可以使用哦！可以看看： <a href="https://marketplace.visualstudio.com/items?itemName=MakotoAtsu.AspNetCoreViteStarter">AspNetCore_Vite_Starter</a></p>
</blockquote>
<p>不過這一篇我們是用官方提供的版本來進行建置，我們繼續往下看</p>
<h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><ol>
<li><p>打開Visual Studio 2022，點選<strong>建立新的專案</strong><br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/1.PNG"></p>
</li>
<li><p>找到「Vue與ASP.NET Core(預覽)」專案類型，並點選下一步<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/3.PNG"></p>
</li>
<li><p>命名專案名稱，名稱自取即可，然後按建立<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/4.PNG"></p>
</li>
</ol>
<h2 id="本地環境更改及運行專案"><a href="#本地環境更改及運行專案" class="headerlink" title="本地環境更改及運行專案"></a>本地環境更改及運行專案</h2><ol>
<li><p>找到後端專案，也就是<strong>webapi</strong>，點選右鍵，選擇屬性<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/5.PNG"></p>
</li>
<li><p>將目標Framework本來為.Net 7.0 改為.Net 6.0，因6.0版本為長期支援版本<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/6.PNG"></p>
</li>
<li><p>這時候我們點選上方的<strong>開始</strong>，來跑跑看程式是不是能夠run起來<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/10.PNG"><br>會得到以下錯誤<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/7.PNG"><br>原因是OpenApi版本不相容於.net6.0版本</p>
</li>
<li><p>點選<strong>專案</strong>，在點選管理<strong>NuGet套件</strong>，將Microsoft.AspNetCore.OpenApi套件解除安裝<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/9.PNG"></p>
<p> 做到這邊按下<strong>開始</strong>(如步驟3)<br> <img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/10.PNG"><br> 還是會噴錯，發現有處理DateOnly的相關錯誤<br> <img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/33.PNG"><br> 原因是因為雖然.Net6雖然有引入DateOnly的類別可以使用，但在轉為Json格式的時候會發現無法轉換問題。</p>
<blockquote>
<p>有興趣可以看看這篇文章：<a href="https://storck.io/posts/serializing-net-6-dateonly-to-json/">https://storck.io/posts/serializing-net-6-dateonly-to-json/</a> 裡面有提到解決方式，但我們這篇文章就簡單處理，不要使用DateOnly即可。</p>
</blockquote>
</li>
<li><p>接著我們到後端ewbapi專案，把Controllers內WeatherForecastController.cs打開，</p>
<p> 把<code>Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index))</code>這行改為<code>Date = DateTime.Now.AddDays(index)</code></p>
</li>
</ol>
<p><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/12.PNG"></p>
<ol start="6">
<li><p>接著也到WeatherForecast.cs這個類別檔把DateOnly的類別改為DateTime，這樣才能對應上，否則編譯會報錯<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/14.PNG"></p>
</li>
<li><p>按下<strong>開始</strong>(如步驟3)，我們就可以看到Vue前端畫面就成功出來了，並且資料也是從後端來的<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/31.PNG"></p>
</li>
</ol>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>為什麼前端的port是5173，為什麼可以打到後端的api呢？</p>
<ol>
<li><p>看一下後端webapi專案的Properties&#x2F;launchSettings.json裡面的後端port是多少<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/16.PNG"><br>我們可以看到是7038</p>
</li>
<li><p>再來看一下前端vueapp專案的vite.config.js配置<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/17.PNG"><br>可以看到是用Vite內可設定Proxy代理機制讓前端可以打到後端api(也就是說前端起一個Proxy server用代理的方式去打api)<br>如果不這樣設定，後端就要設定Cors然後用不同的port去互做溝通，也能取得相同的效果，不過用Proxy的方式可以順利的處理掉還要寫Cors的問題，也較為簡潔</p>
</li>
</ol>
<h2 id="部署上線"><a href="#部署上線" class="headerlink" title="部署上線"></a>部署上線</h2><p>若要部署上線的話，我們要把前端檔案做編譯打包，所以概念就是由後端host讀取前端靜態檔案</p>
<blockquote>
<p>為什麼要打包呢？因為瀏覽器是看不懂vue檔的，所以要用前端打包工具(像我們這邊是用Vite)來做打包</p>
</blockquote>
<ol>
<li><p>到後端webapi專案的Programs.cs檔內加上，放在原有if的判斷下方</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    app.UseDefaultFiles();</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如以下<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/18.PNG"></p>
</li>
<li><p>將後端webapi專案點選右鍵，並且按下<strong>發佈</strong><br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/19.PNG"></p>
<p> 選擇<strong>資料夾</strong>，並點選<strong>下一步</strong><br> <img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/20.PNG"></p>
<p> 先在電腦某處創好一個空資料夾(資料夾可自行取名)，然後<strong>資料夾位置</strong>選擇它，設置好後按下<strong>完成</strong><br> <img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/21.PNG"></p>
<p> 繼續以下步驟<br> <img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/22.PNG"><br> 點選發佈<br> <img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/24.PNG"></p>
</li>
<li><p>開啟電腦上的IIS管理介面，左邊選單針對<strong>站台</strong>點選右鍵，新增網站<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/25.PNG"></p>
</li>
<li><p>設置網站資訊，取個站台名稱(自行取名即可)，也選擇剛剛後端發佈程式的資料夾(參考第2步驟)，連接埠也設置一個你目前沒有在使用的port，按下確定<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/26.PNG"></p>
<p> 還沒完成喔，請等等</p>
</li>
<li><p>接下來回到Visual Studio開啟<strong>開發人員PowerShell</strong>，輸入以下指令<br>移動到前端資料夾</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd vueapp</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>打包出一個資料夾，裡面都是打包後的靜態檔案，如下圖<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/27.PNG"></p>
</li>
<li><p>複製剛剛創建出來的dist資料夾到發佈站台的資料夾<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/28.PNG"><br>並改名為<strong>wwwroot</strong>，因為這個名稱為靜態檔案的入口<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/29.PNG"></p>
</li>
<li><p>到瀏覽器上面輸入<a href="http://localhost:7688/">http://localhost:7688</a>  (port會根據在第4步驟設定會有所不同) ，順利呈現頁面，並且也能看到後端回來的資料<br><img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/30.PNG"></p>
<p> 如出現ANCM 500.31的錯誤頁面，請下載<a href="https://dotnet.microsoft.com/en-us/download/dotnet/6.0">.NET6.0 SDK</a><strong>ASP.NET Core Runtime</strong>，下載Hosting Bundle並安裝即可<br> <img src="/img/%E5%BB%BA%E7%AB%8Bwebapi&Vue%E6%88%AA%E5%9C%96/32.PNG"></p>
</li>
</ol>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li>透過這個建置流程讓我更了解建置環境的流程。</li>
<li>官方提供的範例，打包工具是使用Vite，算是這幾年出現的打包新星，速度非常的快，有別於傳統Vue CLI，所以建置Vue前端起來可以說是相當快意！</li>
<li>本來沒有官方的版本，建置起來有點痛苦，容易漏東漏西，容易造成無法順利建置的問題。</li>
</ol>
]]></content>
      <categories>
        <category>系統整合</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>.NetCore</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Azure複製現有VM，達成快速建置VM目的</title>
    <url>/2024/02/27/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為工作需要，需要建立多台虛擬機器(以下簡稱VM)，其內容物都是一樣的VM(OS、已有的程式…)，從零開始建立實在太慢，搜尋一些方式後整理出我最後解決方案及建立步驟說明。</p>
<p>步驟順序大致為 1. 從硬碟建立快照 2. 以此快照建立硬碟 3. 以此磁碟建立VM</p>
<h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><ol>
<li><p>從硬碟建立快照<br> (1) 於Azure平台上點選虛擬機器服務<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/1.PNG"><br> (2) 呈現出目前所有的VM，我們這次打算進行AP-01這台VM的快速複製<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/2.PNG"><br> (3) 進到AP-01後，點選左方<strong>磁碟</strong>(註：此VM停不停止運作都沒關係)<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/3.PNG"><br> (4) 點選磁碟名稱<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/4.PNG"><br> (5) 進入該磁碟頁面後，點選<strong>建立快照集</strong><br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/5.PNG"><br> (6) 為此快照取一個名稱，其餘用預設值就好，並按下檢閱+建立<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/6.PNG"><br> (7) 完成建立快照！建立完成後點選前往資源<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/7.PNG"></p>
</li>
<li><p>以此快照建立硬碟<br> (1) 點選<strong>建立磁碟</strong><br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/8.PNG"><br> (2) 為此磁碟取一個名稱，其餘用預設值就好，並按下檢閱+建立，再按下建立<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/9.PNG"><br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/11.PNG"><br> (3) 完成建立磁碟！建立完成後點選前往資源<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/12.PNG"></p>
</li>
<li><p>以此磁碟建立VM<br> (1) 點選<strong>建立VM</strong><br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/13.PNG"><br> (2) 為此VM取一個名稱，其餘用預設值就好，並按下檢閱+建立，再按下建立<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/14.PNG"><br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/15.PNG"><br> (3) 完成建立VM！建立完成後點選前往資源<br> <img src="/img/%E5%A6%82%E4%BD%95%E5%9C%A8Azure%E8%A4%87%E8%A3%BD%E7%8F%BE%E6%9C%89VM%EF%BC%8C%E9%81%94%E6%88%90%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AEVM%E7%9B%AE%E7%9A%84/16.PNG"></p>
</li>
</ol>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>反覆透過以上方式可以建立多台VM，不用從零做VM架設，實在很方便！紀錄建置相關步驟，提醒有同樣需求的人和未來的自己有相同需求時，可以快速建立VM。</p>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
      </tags>
  </entry>
</search>
