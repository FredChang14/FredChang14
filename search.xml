<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Python串接Azure OpenAI服務</title>
    <url>/2023/11/01/%E4%BD%BF%E7%94%A8Python%E4%B8%B2%E6%8E%A5Azure%20OpenAI%E6%9C%8D%E5%8B%99/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由於工作需求，我開始使用Azure AI平台。在網路上尋找相關教學時，在打Azure openai的api前所需要填入的參數不知道該往哪裡找。為了方便其他使用者，在這裡記錄一份詳細的指南，說明如何在Azure平台上迅速找到與Azure OpenAI相關的資訊。隨後，我將展示如何將這些資訊正確填入Python程式碼中，並成功執行。</p>
<span id="more"></span>
<hr>
<h2 id="環境介紹"><a href="#環境介紹" class="headerlink" title="環境介紹"></a>環境介紹</h2><p>Python 3.11<br>openai 0.28.1   (自行在IDE上安裝)</p>
<blockquote>
<p>須特別留意，Python一定要3.7.1版本以上，先前筆者一直使用3.7版本，即或資訊都填對，程式也都會發生錯誤</p>
</blockquote>
<h2 id="Azure-AI平台登入取得資訊並Python程式碼參數填寫步驟說明"><a href="#Azure-AI平台登入取得資訊並Python程式碼參數填寫步驟說明" class="headerlink" title="Azure AI平台登入取得資訊並Python程式碼參數填寫步驟說明"></a>Azure AI平台登入取得資訊並Python程式碼參數填寫步驟說明</h2><ol>
<li><p>到這個網址進行登入 <a href="https://azure.microsoft.com/zh-tw/solutions/ai">https://azure.microsoft.com/zh-tw/solutions/ai</a> 後，連至主控台<br>並點選Azure OpenAI(如沒有出現在主控台，可直接用上方搜尋欄輸入Azure OpenAI送出即可)<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-1.PNG"></p>
</li>
<li><p>點選之前有創建過的GPT模型名稱<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-2.PNG"></p>
</li>
<li><p>點選左側「模型部署」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-3.PNG"></p>
</li>
<li><p>再點選「管理部署」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-4.PNG"></p>
</li>
<li><p>就會連至Azure OpenAIO Studio介面，點選左側選單「聊天」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-5.PNG"></p>
</li>
<li><p>確認右側設定是否就是我們先前部署的部署名稱 (就是確認服務的意思)，確認沒問題，點選「檢視程式碼」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-6.PNG"></p>
</li>
<li><p>就會看到提供的Python範例程式碼<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-7.PNG"><br>將全部程式碼複製下來到你的IDE上</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Note: The openai-python library support for Azure OpenAI is in preview.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line">openai.api_type = <span class="string">&quot;azure&quot;</span></span><br><span class="line">openai.api_base = <span class="string">&quot;https://gpt-xxx.openai.azure.com/&quot;</span></span><br><span class="line">openai.api_version = <span class="string">&quot;2023-07-01-preview&quot;</span></span><br><span class="line">openai.api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = openai.ChatCompletion.create(</span><br><span class="line">engine=<span class="string">&quot;gpt35-xxx&quot;</span>,</span><br><span class="line">messages = [&#123;<span class="string">&quot;role&quot;</span>:<span class="string">&quot;system&quot;</span>,<span class="string">&quot;content&quot;</span>:<span class="string">&quot;You are an AI assistant that helps people find information.&quot;</span>&#125;],</span><br><span class="line">temperature=<span class="number">0.7</span>,</span><br><span class="line">max_tokens=<span class="number">800</span>,</span><br><span class="line">top_p=<span class="number">0.95</span>,</span><br><span class="line">frequency_penalty=<span class="number">0</span>,</span><br><span class="line">presence_penalty=<span class="number">0</span>,</span><br><span class="line">stop=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>這時候我們會需要API Key，連回至<a href="https://portal.azure.com/">https://portal.azure.com/</a> ，回到本文1~2步驟，選到你的Azure OpenAI服務，接著點選左側「金鑰與端點」<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-8.PNG"></p>
</li>
<li><p>點選金鑰1或金鑰2複製都可以，複製下來貼上到第6步驟程式碼的<strong>openai.api_key</strong>的值<br><img src="/img/Python%E4%B8%B2%E6%8E%A5Azure-9.PNG"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">openai.api_key = <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXX&quot;</span> <span class="comment"># 替換成複製下來的Key</span></span><br></pre></td></tr></table></figure>
<p>並印出GPT回應內容</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure>
</li>
<li><p>執行程式，如果能成功印出內容就代表串接成功了，像筆者是取得以下回應，每人會不同<br><em>Hello! I am an AI assistant here to help you find information. What can I help you with today?</em></p>
</li>
</ol>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>對於一開始接觸Azure AI的人可能有時候需要的資訊會找不太到，所以紀錄一下，讓未來的自己和新接觸的人可以看到這篇記錄快速完成串接。</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Nuxt3使用vue-social-sharing套件</title>
    <url>/2023/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Nuxt3%E4%BD%BF%E7%94%A8vue-social-sharing%E5%A5%97%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vue-social-sharing是用來透過社群軟體分享網頁內容的一個套件，例如：Facebook、Line 社群軟體，在npm有高手寫了一個vue-social-sharing套件，在Vue和Nuxt2可以成功用說明成功安裝並使用，但在Nuxt3會引入失敗，所以這一篇文章就來實現如何在Nuxt3將此套件引入並實作相關邏輯出來。</p>
<span id="more"></span>
<h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><ol>
<li><p>先進行套件安裝 npm install — save vue-social-sharing@next</p>
</li>
<li><p>嘗試依據npm作者提供之方式引入，在nuxt.config.ts檔案內寫上modules屬性內寫入套件名。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: [</span><br><span class="line">        <span class="string">&#x27;vue-social-sharing/nuxt&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>但無法順利引用，判斷套件可使用在Nuxt2，無法使用在Nuxt3。</p>
<ol start="3">
<li><p>解決方法：使用plungins方式引用此套件</p>
<p> (1)於plugins內新增socialSharing.js檔案，內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueSocialSharing</span> <span class="keyword">from</span> <span class="string">&quot;vue-social-sharing&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function"><span class="params">nuxtApp</span> =&gt;</span> &#123;</span><br><span class="line">    nuxtApp.<span class="property">vueApp</span>.<span class="title function_">use</span>(<span class="title class_">VueSocialSharing</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> (2)在components資料夾內新增SocialShare.vue檔，內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> sharing = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;https://github.com/nicolasbeauvais/vue-social-sharing?ref=morioh.com&amp;utm_source=morioh.com&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Say hi to Vite! A brand new, extremely fast development setup for Vue.&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;This week, I’d like to introduce you to &quot;Vite&quot;, which means &quot;Fast&quot;. It’s a brand new development setup created by Evan You.&#x27;</span>,</span><br><span class="line">    <span class="attr">quote</span>: <span class="string">&quot;The hot reload is so fast it&#x27;s near instant. - Evan You&quot;</span>,</span><br><span class="line">    <span class="attr">hashtags</span>: <span class="string">&quot;vuejs,vite,javascript&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> networks = <span class="title function_">reactive</span>([</span><br><span class="line">    &#123; <span class="attr">network</span>: <span class="string">&quot;facebook&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Facebook&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;fab fah fa-lg fa-facebook-f&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;#1877f2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">network</span>: <span class="string">&quot;line&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;Line&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;fab fah fa-lg fa-line&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;#00c300&quot;</span> &#125;,</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ShareNetwork</span> <span class="attr">class</span>=<span class="string">&quot;float-right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-for</span>=<span class="string">&quot;network in networks&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:network</span>=<span class="string">&quot;network.network&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:key</span>=<span class="string">&quot;network.network&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: network.color &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:url</span>=<span class="string">&quot;sharing.url&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:title</span>=<span class="string">&quot;sharing.title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:description</span>=<span class="string">&quot;sharing.description&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:quote</span>=<span class="string">&quot;sharing.quote&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:hashtags</span>=<span class="string">&quot;sharing.hashtags&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:twitterUser</span>=<span class="string">&quot;sharing.twitterUser&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;network.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; network.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ShareNetwork</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p> (3) 如有多個分享社群，因Nuxt server render問題，會發生只有第一個社群媒體圖示會正常呈現出來，則引入上述步驟時的component時應使用defineAsyncComponent非同步引入方式，script標籤內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SocialShare</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/SocialShare.vue&quot;</span>));</span><br></pre></td></tr></table></figure>

<p> 並在template使用ClientOnly方式，讓該component只在client端render出來，內容如下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">ClientOnly</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">SocialShare</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ClientOnly</span>&gt;</span><br></pre></td></tr></table></figure>

<p> (4) 成功引入！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Vue</tag>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>探究Vue的watch機制</title>
    <url>/2023/10/27/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Vue.js我們常常會使用watch來做一些對應處理，例如可以監控某值出現變化的時候，就觸發function去做事情，有時候我們也會需要拿到變化前的值或變化後的值去做利用。此篇我們來探討一下watch機制如何運作</p>
<span id="more"></span>

<h2 id="監控ref定義的響應式數據"><a href="#監控ref定義的響應式數據" class="headerlink" title="監控ref定義的響應式數據"></a>監控ref定義的響應式數據</h2><p>請特別注意，這邊提到的是數據，不是物件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>,newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;&#123;sum&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>點擊一下，查看主控台(F12&gt;&gt;console)會印出1和0的值<br><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-1.PNG"><br>再點一下newVal和oldVal則再往上累加。<br>代表監控ref定義的響應式數據</p>
<ol>
<li>可以直接針對ref進行監控</li>
<li>可以成功印出新值和舊值</li>
</ol>
<h2 id="監控ref定義的多個響應式數據"><a href="#監控ref定義的多個響應式數據" class="headerlink" title="監控ref定義的多個響應式數據"></a>監控ref定義的多個響應式數據</h2><p>用陣列將要監控的ref裝起來</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> message= <span class="title function_">ref</span>(<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line"><span class="title function_">watch</span>([sum,message],<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>,newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;&#123;sum&#125;&#125;</span></span><br><span class="line"><span class="language-xml">&#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>sum click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;message += &#x27;~&#x27;&quot;</span>&gt;</span>message click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>點選sum click按鈕會印出以下結果</p>
<p><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-2.PNG"></p>
<h2 id="監控reactive所定義的一個響應式物件"><a href="#監控reactive所定義的一個響應式物件" class="headerlink" title="監控reactive所定義的一個響應式物件"></a>監控reactive所定義的一個響應式物件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; person.age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>點選click按鈕會印出以下結果<br><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-3.PNG"><br>我們會發現newVal的age值變成19了，oldVal竟然也是相同值(因指向同一個對象，共用一份記憶體)，代表我們無法取得oldVal的值，這一點要特別留意，不過我們一般的需求也還真的鮮少拿舊的值去做運用，所以影響並沒有太大。</p>
<blockquote>
<p>註：reactive也能改為ref，但監控對象就要改寫為person.value，才能偵測到裡面值的變化</p>
</blockquote>
<h2 id="監控reactive所定義的一個響應式數值"><a href="#監控reactive所定義的一個響應式數值" class="headerlink" title="監控reactive所定義的一個響應式數值"></a>監控reactive所定義的一個響應式數值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(person.<span class="property">age</span>, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; person.age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>瀏覽器會直接報出警告<em>A watch source can only be a getter&#x2F;effect function, a ref, a reactive object, or an array of these types.</em><br>意思是說，watch能監控的對象只能是 getter函式、ref對象、reactive物件對象、陣列，所以上述例子person.age是單純的值是無法監控的，所以要做監控的話我們可以包裝成getter函式，改寫成以下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">age</span>,<span class="function">(<span class="params">newVal,oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>按下click後印出以下結果<br><img src="/img/%E6%8E%A2%E7%A9%B6Vue%E7%9A%84watch%E6%A9%9F%E5%88%B6-4.PNG"></p>
<p>這樣就能順利監控到person.age的值了</p>
<blockquote>
<p>註：reactive也能改為ref，但監控對象就要改成()&#x3D;&gt;person.value.age，才能偵測到裡面值的變化</p>
</blockquote>
<h2 id="為什麼有時候ref對象要加上-value，有時候不用，判斷標準是什麼"><a href="#為什麼有時候ref對象要加上-value，有時候不用，判斷標準是什麼" class="headerlink" title="為什麼有時候ref對象要加上.value，有時候不用，判斷標準是什麼"></a>為什麼有時候ref對象要加上.value，有時候不用，判斷標準是什麼</h2><p>依據對象型態而定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">job</span>: &#123;</span><br><span class="line">    <span class="attr">m1</span>: &#123;</span><br><span class="line">      <span class="attr">salary</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">watch</span>(sum, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">watch</span>(person.<span class="property">value</span>, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; sum &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; person.job.m1.salary &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.job.m1.salary++&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>像sum的話是一個基本類型數字型態用ref包裝起來的，就不用額外加上.value，因為加上.value就是指裡面0的值，是無法作監控的。<br>如果是person因為他是一個物件用ref包裝，裡面的屬性值變化時，需要偵測我們就必須監控person.value的值，就是針對Proxy物件來監控，就能偵測到變化。<br>另外一提，假若現在真的不想要.value，則可將watch改寫為以下，加上{deep:true}做深層監控，也是能監控到最新的值，如何使用還是看個人習慣。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span>, newVal)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal&quot;</span>, oldVal)</span><br><span class="line">&#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="上述範例重點整理"><a href="#上述範例重點整理" class="headerlink" title="上述範例重點整理"></a>上述範例重點整理</h2><ol>
<li>如果是基本型態的資料要監控，可用getter函式返回</li>
<li>監控reactive和ref概念一樣，只是要注意ref對象要記得加上.value，加上.value就是等同於reactive對象，就是Proxy物件</li>
<li>承上，如果ref不要用.value處理，則要用{ deep: true }做深層監控，就能監控到</li>
<li>reactive對象，強制會用深層監控，不用加{ deep: true }</li>
</ol>
<blockquote>
<p>參考資料：<a href="https://cn.vuejs.org/guide/essentials/watchers.html#basic-example">官網</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>探討Javascript的Hoisting</title>
    <url>/2023/10/31/%E6%8E%A2%E8%A8%8EJavascript%E7%9A%84Hoisting/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hoisting(中文翻作提升)，這個概念在Javascript常常被使用到，這一篇我們來簡單了解一下Hoisting的運作</p>
<span id="more"></span>
<hr>
<h2 id="var變數的Hoisting"><a href="#var變數的Hoisting" class="headerlink" title="var變數的Hoisting"></a>var變數的Hoisting</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//印出undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>上述結果會印出undefined，為什麼呢？因為這樣寫法等同於以下寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//印出undefined</span></span><br><span class="line">x = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>可以看出Hoisting是指<strong>宣告的動作</strong>被提升</p>
<h2 id="傳統函式的Hoisting"><a href="#傳統函式的Hoisting" class="headerlink" title="傳統函式的Hoisting"></a>傳統函式的Hoisting</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>) <span class="comment">//印出Hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述結果會印出Hello，因為整個function都會被提升，這樣寫法等同於以下寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>) <span class="comment">//印出Hello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>
<p>這也就是為什麼在Javascript裡頭將一個函式用function宣告，也能順利執行函式的原因，因為整個function都提升到呼叫語句之前了阿！</p>
<h2 id="var變數宣告函式的Hoisting"><a href="#var變數宣告函式的Hoisting" class="headerlink" title="var變數宣告函式的Hoisting"></a>var變數宣告函式的Hoisting</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>會發生錯誤<em>Uncaught TypeError: test is not a function”</em> ，因為這樣的宣告方式等同於以下寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test</span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line">test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出Hoisting是指<strong>宣告的動作</strong>被提升，所以這邊的test是undefined，自然而然用函式的方式直接呼叫，瀏覽器就報給我們一個錯誤說test不是一個function。所以如果要用變數宣告function的話，務必要用以下的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>
<p>然後我也會習慣把var改為const方式來宣告，也有點防呆的機制，讓後續的指派變數動作不會誤指派值給這個function，因為我們也很少會把宣告出來的函式重新指派值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ol>
<li>Hoisting的宣告是指宣告的動作被提升，所以使用var來宣告變數或函式時要特別留意。</li>
<li>在實際專案中，我也較習慣宣告變數都使用let或是const，不會使用var，這樣就能避開Hoisting的問題；至於宣告函式我也習慣用const方式宣告，可以避免誤指派值的事情發生。</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂Javascript的this</title>
    <url>/2023/10/27/%E6%90%9E%E6%87%82Javascript%E7%9A%84this/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Javascript程式語言中，常面臨到this，但也很常搞不太清楚this指向的對象是誰，而造成程式的一些bug，透過這篇文章來釐清並整理一下this的觀念，以下將用各情境來說明。</p>
<span id="more"></span>
<hr>
<h2 id="情境1-直接宣告this"><a href="#情境1-直接宣告this" class="headerlink" title="情境1-直接宣告this"></a>情境1-直接宣告this</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(this) <span class="comment">//Window</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>會發現無任何包裝，直接印出this，會指向Window物件</p>
<h2 id="情境2-獨立函式內的this"><a href="#情境2-獨立函式內的this" class="headerlink" title="情境2-獨立函式內的this"></a>情境2-獨立函式內的this</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testFn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(this); <span class="comment">//Window</span></span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(this.innerWidth); <span class="comment">//可以印出視窗的寬度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>獨立函式內的this也是指向Window物件</p>
<h2 id="情境3-物件方法內的this"><a href="#情境3-物件方法內的this" class="headerlink" title="情境3-物件方法內的this"></a>情境3-物件方法內的this</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Fred&quot;</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//person物件本身</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//Fred</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure>
<p>可以看出物件方法內的this就是物件本身，所以也能因此再找出其他屬性或方法，如name屬性，就印出Fred。<br>這時候我們來實驗一下，把傳統function改為箭頭函式會發生什麼事情呢？</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">let person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Fred&quot;</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(this); <span class="comment">//Window</span></span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(this.name); <span class="comment">//undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.say();</span><br></pre></td></tr></table></figure>
<p>這時候發現this竟然會印出Window物件，為什麼呢？因為如果用箭頭函式，就沒有自己的this，所以如果在箭頭函式內沒有找到this變數，就會往外找，就直接找到Window物件，所以也因為Window沒有name的屬性，自然this.name就印出undefined了。所以使用箭頭函式時要特別注意一下這個觀念。</p>
<h2 id="情境4-事件處理function"><a href="#情境4-事件處理function" class="headerlink" title="情境4-事件處理function"></a>情境4-事件處理function</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//document元素</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;我被點到了&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>this就是觸發事件的對象物件，像上述範例來說，就是document元素。<br>若改為箭頭函式，會發生什麼事呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//Window</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&quot;我被點到了&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在情境3時我們有提到箭頭函式沒有自己的this，所以函式內的this就是往外找，也找到了Window物件，因此，如果我們點一下畫面會直接報錯Uncaught TypeError: Cannot set properties of undefined (setting ‘innerHTML’)</p>
<h2 id="情境5-建構函式-Constructor-Function"><a href="#情境5-建構函式-Constructor-Function" class="headerlink" title="情境5-建構函式(Constructor Function)"></a>情境5-建構函式(Constructor Function)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//&#123;&#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Fred&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1); <span class="comment">//&#123;age: 18,name: &quot;Fred&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>這個範例可以發現第2行的this印出來是Person空白物件，不是一般物件。</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在做專案的時候常常因為追求語法閱讀與簡潔所以常會用到this，但往往沒有搞懂一些概念而造成意外的bug發生，如果再加上箭頭函式的觀念也沒有搞清楚的話，除錯起來也是很辛苦的，所以特別將this用法整理出來，也提醒自己要留意this的指向。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>用for迴圈執行setTimeout方法印出1~5有哪些解法</title>
    <url>/2023/10/27/%E8%B7%91%E8%BF%B4%E5%9C%88%E7%94%A8setTimeout%E5%8D%B0%E5%87%BA1-5%E6%9C%89%E5%93%AA%E4%BA%9B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我們常用跑迴圈setTimeout來理解var和let的差異，我們知道var的作用域是以function來分界，let是以{}來分界，那現在我們也一個需求是我就是不要用let，一定選擇用var來作為解決方案，那該如何解決這個問題呢？</p>
<span id="more"></span>

<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>使用var不做任何處理，想取得第一秒時取得1、第二秒取得2、…、第五秒取得5</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>卻發現第一秒卻取得5、第二秒也是取得5，一直到第五秒也是取得5。為什麼會發生這樣的問題？因為i變數是用var宣告的，這個變數已經跑到5，並且已經污染到全域了。<br>可以在這段程式碼後面是者印出i來看看，我們可以取得迴圈內的變數i的值console.log(i)，會發現印出5</p>
<p>我們一般常會用的解法可能是把var改為let就好了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就能拿到預期的結果，第一秒時取得1、第二秒取得2、…、第五秒取得5。</p>
<p>現在我就只想用var不想用let來實驗有沒有辦法得到上述需求</p>
<hr>
<h2 id="解法1：使用setTimeout傳入參數方式處理"><a href="#解法1：使用setTimeout傳入參數方式處理" class="headerlink" title="解法1：使用setTimeout傳入參數方式處理"></a>解法1：使用setTimeout傳入參數方式處理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>setTimeout我們一般使用可能只會傳兩個參數，但setTimeout可以傳入第三個參數，如此一來就不會被全域的問題影響到i值</p>
<blockquote>
<p>參考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout">MDN文件：setTimeout</a></p>
</blockquote>
<h2 id="解法2：使用bind方式處理"><a href="#解法2：使用bind方式處理" class="headerlink" title="解法2：使用bind方式處理"></a>解法2：使用bind方式處理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(<span class="literal">null</span>, i), i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這個方式是用bind方式，因為沒有要綁任何對象，所以bind方法第一個參數填上null即可，但二個參數就要填上setTimeout傳入的參數i，如此一來也能達到需求</p>
<blockquote>
<p>參考：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN文件：bind</a></p>
</blockquote>
<h2 id="解法3：使用閉包-closure"><a href="#解法3：使用閉包-closure" class="headerlink" title="解法3：使用閉包(closure)"></a>解法3：使用閉包(closure)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">    &#125;, x * <span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過傳入i給立即函式的方式，立即函式裡面用x變數將i變數的值保存下來，進而達到預期效果。<br>註：閉包要有巢狀的function才算是閉包哦</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>以上三種方式就是今天限制自己不用let方式，只使用var來達到預期的結果。不過在正式專案中，還是推薦用let的方式來做這個需求會更簡潔，也更好懂，像筆者的一些專案是不會看到任何var的蹤影。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
</search>
